/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    pages: Page;
    blog: Blog;
    keywords: Keyword;
    users: User;
    media: Media;
    forms: Form;
    'form-submissions': FormSubmission;
    redirects: Redirect;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    blog: BlogSelect<false> | BlogSelect<true>;
    keywords: KeywordsSelect<false> | KeywordsSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    'global-settings': GlobalSetting;
    'header-nav': HeaderNav;
  };
  globalsSelect: {
    'global-settings': GlobalSettingsSelect<false> | GlobalSettingsSelect<true>;
    'header-nav': HeaderNavSelect<false> | HeaderNavSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  hero: {
    type: 'none' | 'slider' | 'highImpact' | 'mediumImpact' | 'lowImpact';
    heroFieldsSlider?: {
      slide?:
        | {
            richText?: {
              root: {
                type: string;
                children: {
                  type: any;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            links?:
              | {
                  link: {
                    type?: ('reference' | 'custom') | null;
                    newTab?: boolean | null;
                    reference?:
                      | ({
                          relationTo: 'pages';
                          value: number | Page;
                        } | null)
                      | ({
                          relationTo: 'blog';
                          value: number | Blog;
                        } | null);
                    url?: string | null;
                    label: string;
                    /**
                     * Choose how the link should be rendered.
                     */
                    appearance?: ('default' | 'outline' | 'ghost' | 'link' | 'secondary' | 'destructive') | null;
                    /**
                     * Choose size of the link.
                     */
                    size?: ('default' | 'clear' | 'sm' | 'lg' | 'icon') | null;
                  };
                  id?: string | null;
                }[]
              | null;
            alignment: 'center' | 'left' | 'right';
            media: number | Media;
            id?: string | null;
          }[]
        | null;
      /**
       * uncheck to disable autoplay.
       */
      autoplay: boolean;
      /**
       * check to show time counter on bottom left corner.
       */
      timeCount?: boolean | null;
      /**
       * Add delay time in seconds.
       */
      delay?: number | null;
    };
    heroFields?: {
      richText?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      links?:
        | {
            link: {
              type?: ('reference' | 'custom') | null;
              newTab?: boolean | null;
              reference?:
                | ({
                    relationTo: 'pages';
                    value: number | Page;
                  } | null)
                | ({
                    relationTo: 'blog';
                    value: number | Blog;
                  } | null);
              url?: string | null;
              label: string;
              /**
               * Choose how the link should be rendered.
               */
              appearance?: ('default' | 'outline' | 'ghost' | 'link' | 'secondary' | 'destructive') | null;
              /**
               * Choose size of the link.
               */
              size?: ('default' | 'clear' | 'sm' | 'lg' | 'icon') | null;
            };
            id?: string | null;
          }[]
        | null;
      alignment: 'center' | 'left' | 'right';
      media?: (number | null) | Media;
    };
  };
  layout: (CallToActionBlock | ContentBlock | MediaBlock | FormBlock)[];
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
  };
  advanced: {
    /**
     * Select relevant keywords for SEO. These will be used in meta tags and may affect search visibility.
     */
    keywords?: (number | Keyword)[] | null;
    /**
     * Add structured data markup for search engines. Each schema should be valid JSON-LD.
     */
    schemas?:
      | {
          /**
           * Descriptive name for this schema (e.g., 'Organization', 'Article', 'Product')
           */
          name: string;
          /**
           * Valid JSON-LD structured data markup
           */
          schema: string;
          id?: string | null;
        }[]
      | null;
    /**
     * Controls how search engines crawl and index this page.
     */
    robots: {
      index: boolean;
      follow: boolean;
    };
    canonical?: string | null;
    navigation: {
      /**
       * Check this to disable the Header Navigation Menu on page
       */
      disableHeader: boolean;
    };
  };
  publishedAt?: string | null;
  /**
   * Each segment represents a part of the URL path. For example: ["services", "seo"] creates /services/seo
   */
  segments?:
    | {
        label: string;
        segment: string;
        id?: string | null;
      }[]
    | null;
  slug?: string | null;
  slugLock?: boolean | null;
  /**
   * Auto-generated full path from segments and slug
   */
  fullPath: string;
  /**
   * Check this to make this page the homepage. Only one page can be the homepage.
   */
  homepage: boolean;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog".
 */
export interface Blog {
  id: number;
  title: string;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  advanced: {
    /**
     * Select relevant keywords for SEO. These will be used in meta tags and may affect search visibility.
     */
    keywords?: (number | Keyword)[] | null;
    /**
     * Add structured data markup for search engines. Each schema should be valid JSON-LD.
     */
    schemas?:
      | {
          /**
           * Descriptive name for this schema (e.g., 'Organization', 'Article', 'Product')
           */
          name: string;
          /**
           * Valid JSON-LD structured data markup
           */
          schema: string;
          id?: string | null;
        }[]
      | null;
    /**
     * Controls how search engines crawl and index this page.
     */
    robots: {
      index: boolean;
      follow: boolean;
    };
    canonical?: string | null;
  };
  publishedAt?: string | null;
  slug: string;
  slugLock?: boolean | null;
  /**
   * Auto-generated full path from slug
   */
  fullPath: string;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt?: string | null;
  caption?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "keywords".
 */
export interface Keyword {
  id: number;
  keyword: string;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock".
 */
export interface CallToActionBlock {
  richText?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'blog';
                value: number | Blog;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline' | 'link' | 'ghost' | 'secondary' | 'destructive') | null;
          /**
           * Choose size of the link.
           */
          size?: ('default' | 'clear' | 'sm' | 'lg' | 'icon') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock".
 */
export interface ContentBlock {
  columns?:
    | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: any;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'blog';
                value: number | Blog;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline' | 'ghost' | 'link' | 'secondary' | 'destructive') | null;
          /**
           * Choose size of the link.
           */
          size?: ('default' | 'clear' | 'sm' | 'lg' | 'icon') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: number | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: number | Form;
  enableIntro?: boolean | null;
  /**
   * Choose how the submit button should align in the form.
   */
  submitButtonAlign?: ('default' | 'left' | 'center' | 'right') | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: number;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: any;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: any;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: number;
  form: number | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: number;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'blog';
          value: number | Blog;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: number;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'blog';
        value: number | Blog;
      } | null)
    | ({
        relationTo: 'keywords';
        value: number | Keyword;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'forms';
        value: number | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
      } | null)
    | ({
        relationTo: 'redirects';
        value: number | Redirect;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: number | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  hero?:
    | T
    | {
        type?: T;
        heroFieldsSlider?:
          | T
          | {
              slide?:
                | T
                | {
                    richText?: T;
                    links?:
                      | T
                      | {
                          link?:
                            | T
                            | {
                                type?: T;
                                newTab?: T;
                                reference?: T;
                                url?: T;
                                label?: T;
                                appearance?: T;
                                size?: T;
                              };
                          id?: T;
                        };
                    alignment?: T;
                    media?: T;
                    id?: T;
                  };
              autoplay?: T;
              timeCount?: T;
              delay?: T;
            };
        heroFields?:
          | T
          | {
              richText?: T;
              links?:
                | T
                | {
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          reference?: T;
                          url?: T;
                          label?: T;
                          appearance?: T;
                          size?: T;
                        };
                    id?: T;
                  };
              alignment?: T;
              media?: T;
            };
      };
  layout?:
    | T
    | {
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
      };
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  advanced?:
    | T
    | {
        keywords?: T;
        schemas?:
          | T
          | {
              name?: T;
              schema?: T;
              id?: T;
            };
        robots?:
          | T
          | {
              index?: T;
              follow?: T;
            };
        canonical?: T;
        navigation?:
          | T
          | {
              disableHeader?: T;
            };
      };
  publishedAt?: T;
  segments?:
    | T
    | {
        label?: T;
        segment?: T;
        id?: T;
      };
  slug?: T;
  slugLock?: T;
  fullPath?: T;
  homepage?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock_select".
 */
export interface CallToActionBlockSelect<T extends boolean = true> {
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
              size?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock_select".
 */
export interface ContentBlockSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        size?: T;
        richText?: T;
        enableLink?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
              size?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  enableIntro?: T;
  submitButtonAlign?: T;
  introContent?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog_select".
 */
export interface BlogSelect<T extends boolean = true> {
  title?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  advanced?:
    | T
    | {
        keywords?: T;
        schemas?:
          | T
          | {
              name?: T;
              schema?: T;
              id?: T;
            };
        robots?:
          | T
          | {
              index?: T;
              follow?: T;
            };
        canonical?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  fullPath?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "keywords_select".
 */
export interface KeywordsSelect<T extends boolean = true> {
  keyword?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "global-settings".
 */
export interface GlobalSetting {
  id: number;
  general?: {
    name?: string | null;
    description?: string | null;
    /**
     * Select a 48 x 48 pixel ICO to display in browser tabs.
     */
    favicon?: (number | null) | Media;
    /**
     * Select a 16 x 16 pixel ICO, SVG, WEBP, AVIF, PNG, JPG or JPEG
     */
    icon16?: (number | null) | Media;
    /**
     * Select a 32 x 32 pixel ICO, SVG, WEBP, AVIF, PNG, JPG or JPEG
     */
    icon32?: (number | null) | Media;
    /**
     * Select a 96 x 96 pixel ICO, SVG, WEBP, AVIF, PNG, JPG or JPEG
     */
    icon96?: (number | null) | Media;
    /**
     * Select a 180 x 180 pixel WEBP, AVIF, PNG, JPG or JPEG
     */
    appleTouchIcon180?: (number | null) | Media;
  };
  seo: {
    /**
     * Controls how search engines crawl and index this site.
     */
    robots: {
      index: boolean;
      follow: boolean;
      nocache: boolean;
    };
    /**
     * Controls how Google's search crawler (Googlebot) crawl and index this site.
     */
    googleBot: {
      index: boolean;
      follow: boolean;
      noImageIndex: boolean;
    };
    /**
     * Add structured data markup for search engines. Each schema should be valid JSON-LD. These schemas will be added on entire site
     */
    schemas?:
      | {
          /**
           * Descriptive name for this schema (e.g., 'Organization', 'Article', 'Product')
           */
          name: string;
          /**
           * Valid JSON-LD structured data markup
           */
          schema: string;
          id?: string | null;
        }[]
      | null;
    /**
     * Verify your site with Google to get access to your site’s Google search data, and submit your sitemap for indexing.
     */
    googleSiteVerification?: string | null;
    /**
     * Enter Facebook verification code to validate ownership of your domain for Meta services.
     */
    facebookSiteVerification?: string | null;
  };
  integrations?: {
    /**
     * Enter your Google Analytics Measurement ID to enable website traffic tracking via Google Analytics.
     */
    googleAnalyticsId?: string | null;
    /**
     * Enter your Google Tag Manager (GTM) container ID.
     */
    googleTagManagerId?: string | null;
  };
  robotsFile?: {
    rules?:
      | {
          /**
           * Select a bot
           */
          userAgent:
            | '*'
            | 'Googlebot'
            | 'Googlebot-Image'
            | 'Googlebot-News'
            | 'Googlebot-Video'
            | 'AdsBot-Google'
            | 'Mediapartners-Google'
            | 'Storebot-Google'
            | 'Google-Extended'
            | 'bingbot'
            | 'msnbot'
            | 'Slurp'
            | 'Yandex'
            | 'Baiduspider'
            | 'Baiduspider-Image'
            | 'DuckDuckBot'
            | 'facebookexternalhit'
            | 'Twitterbot'
            | 'ClaudeBot'
            | 'GPTBot'
            | 'SemrushBot'
            | 'AhrefsBot'
            | 'MJ12bot';
          allow?:
            | {
                /**
                 * Add paths eg. '/', '/seo/'
                 */
                value: string;
                id?: string | null;
              }[]
            | null;
          disallow?:
            | {
                /**
                 * Add paths eg. '/admin/', '/private/'
                 */
                value: string;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
  };
  sitemap: {
    /**
     * We automatically generate a sitemap for you
     */
    autoGenerateSitemap: boolean;
    customSitemap?: {
      /**
       * Add valid xml data to generate Sitemap.xml file
       */
      xmlData: string;
    };
  };
  social?: {
    facebook?: string | null;
    instagram?: string | null;
    x?: string | null;
    linkedin?: string | null;
    youtube?: string | null;
  };
  /**
   * Select theme for project. Default is System
   */
  theme: 'system' | 'light' | 'dark';
  language?: ('en-IN' | 'en-GB' | 'en-US') | null;
  canonical?: string | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header-nav".
 */
export interface HeaderNav {
  id: number;
  brand: {
    /**
     * Select a brand logo for light background
     */
    logo: number | Media;
    /**
     * Select a brand logo for dark background
     */
    logoLight: number | Media;
  };
  nav?: {
    level0Links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: number | Page;
                } | null)
              | ({
                  relationTo: 'blog';
                  value: number | Blog;
                } | null);
            url?: string | null;
            label: string;
          };
          /**
           * Enable level 1 links
           */
          enableL1: boolean;
          level1Links?:
            | {
                link: {
                  type?: ('reference' | 'custom') | null;
                  newTab?: boolean | null;
                  reference?:
                    | ({
                        relationTo: 'pages';
                        value: number | Page;
                      } | null)
                    | ({
                        relationTo: 'blog';
                        value: number | Blog;
                      } | null);
                  url?: string | null;
                  label: string;
                };
                /**
                 * Enable level 2 links
                 */
                enableL2: boolean;
                level2Links?:
                  | {
                      link: {
                        type?: ('reference' | 'custom') | null;
                        newTab?: boolean | null;
                        reference?:
                          | ({
                              relationTo: 'pages';
                              value: number | Page;
                            } | null)
                          | ({
                              relationTo: 'blog';
                              value: number | Blog;
                            } | null);
                        url?: string | null;
                        label: string;
                      };
                      /**
                       * Enable level 3 links
                       */
                      enableL3: boolean;
                      level3Links?:
                        | {
                            link: {
                              type?: ('reference' | 'custom') | null;
                              newTab?: boolean | null;
                              reference?:
                                | ({
                                    relationTo: 'pages';
                                    value: number | Page;
                                  } | null)
                                | ({
                                    relationTo: 'blog';
                                    value: number | Blog;
                                  } | null);
                              url?: string | null;
                              label: string;
                            };
                            /**
                             * Enable level 4 links
                             */
                            enableL4: boolean;
                            level4Links?:
                              | {
                                  link: {
                                    type?: ('reference' | 'custom') | null;
                                    newTab?: boolean | null;
                                    reference?:
                                      | ({
                                          relationTo: 'pages';
                                          value: number | Page;
                                        } | null)
                                      | ({
                                          relationTo: 'blog';
                                          value: number | Blog;
                                        } | null);
                                    url?: string | null;
                                    label: string;
                                  };
                                  id?: string | null;
                                }[]
                              | null;
                            id?: string | null;
                          }[]
                        | null;
                      id?: string | null;
                    }[]
                  | null;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
  };
  buttons?: {
    buttons?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: number | Page;
                } | null)
              | ({
                  relationTo: 'blog';
                  value: number | Blog;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline') | null;
            /**
             * Choose size of the link.
             */
            size?: ('default' | 'lg') | null;
          };
          id?: string | null;
        }[]
      | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "global-settings_select".
 */
export interface GlobalSettingsSelect<T extends boolean = true> {
  general?:
    | T
    | {
        name?: T;
        description?: T;
        favicon?: T;
        icon16?: T;
        icon32?: T;
        icon96?: T;
        appleTouchIcon180?: T;
      };
  seo?:
    | T
    | {
        robots?:
          | T
          | {
              index?: T;
              follow?: T;
              nocache?: T;
            };
        googleBot?:
          | T
          | {
              index?: T;
              follow?: T;
              noImageIndex?: T;
            };
        schemas?:
          | T
          | {
              name?: T;
              schema?: T;
              id?: T;
            };
        googleSiteVerification?: T;
        facebookSiteVerification?: T;
      };
  integrations?:
    | T
    | {
        googleAnalyticsId?: T;
        googleTagManagerId?: T;
      };
  robotsFile?:
    | T
    | {
        rules?:
          | T
          | {
              userAgent?: T;
              allow?:
                | T
                | {
                    value?: T;
                    id?: T;
                  };
              disallow?:
                | T
                | {
                    value?: T;
                    id?: T;
                  };
              id?: T;
            };
      };
  sitemap?:
    | T
    | {
        autoGenerateSitemap?: T;
        customSitemap?:
          | T
          | {
              xmlData?: T;
            };
      };
  social?:
    | T
    | {
        facebook?: T;
        instagram?: T;
        x?: T;
        linkedin?: T;
        youtube?: T;
      };
  theme?: T;
  language?: T;
  canonical?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header-nav_select".
 */
export interface HeaderNavSelect<T extends boolean = true> {
  brand?:
    | T
    | {
        logo?: T;
        logoLight?: T;
      };
  nav?:
    | T
    | {
        level0Links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                  };
              enableL1?: T;
              level1Links?:
                | T
                | {
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          reference?: T;
                          url?: T;
                          label?: T;
                        };
                    enableL2?: T;
                    level2Links?:
                      | T
                      | {
                          link?:
                            | T
                            | {
                                type?: T;
                                newTab?: T;
                                reference?: T;
                                url?: T;
                                label?: T;
                              };
                          enableL3?: T;
                          level3Links?:
                            | T
                            | {
                                link?:
                                  | T
                                  | {
                                      type?: T;
                                      newTab?: T;
                                      reference?: T;
                                      url?: T;
                                      label?: T;
                                    };
                                enableL4?: T;
                                level4Links?:
                                  | T
                                  | {
                                      link?:
                                        | T
                                        | {
                                            type?: T;
                                            newTab?: T;
                                            reference?: T;
                                            url?: T;
                                            label?: T;
                                          };
                                      id?: T;
                                    };
                                id?: T;
                              };
                          id?: T;
                        };
                    id?: T;
                  };
              id?: T;
            };
      };
  buttons?:
    | T
    | {
        buttons?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    appearance?: T;
                    size?: T;
                  };
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'blog';
          value: number | Blog;
        } | null)
      | ({
          relationTo: 'keywords';
          value: number | Keyword;
        } | null);
    global?: string | null;
    user?: (number | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}